package sp2016_software_engineering_game;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.io.IOException;
import java.util.*;
import java.sql.*;

import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class Main extends JFrame implements Runnable{
	
	private static final long serialVersionUID = 1L;
	private Image dbImage;
	private Graphics dbGraphics;
 
	final int WIDTH = 1280;
	final int HEIGHT = 720;
	int fps, ups;
	
	Thread thread;
	Boolean running = false;
	Boolean started = false;
	static Boolean loginCorrect = false;
	
	Font normalfont = new Font("Arial", Font.BOLD, 20);
	Font bigfont = new Font("Arial", Font.BOLD, 40);
	
	Player me;
	
	StateMachine gGameMode;

	public Main(){
		logIn();
		me = new Player(this);
		gGameMode = new StateMachine();
		addKeyListener(new KeyListener(this, me));
		setTitle("SoftwareEngineering Game");
		setSize(WIDTH, HEIGHT);
		setResizable(false);
		setVisible(true);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBackground(Color.GREEN);
	}
	
	public void paint(Graphics g){
		dbImage = createImage(getWidth(), getHeight());
		dbGraphics = dbImage.getGraphics();
		paintComponent(dbGraphics);
		g.drawImage(dbImage, 0, 0, this);
	}
	
	public void paintComponent(Graphics g)
	{
		drawGame(g);
	}
	
	public void drawGame(Graphics g)
	{
		g.setFont(normalfont);
		g.setColor(Color.BLACK);
		g.drawString("HP: " + me.health, 30, 60);
		g.drawString("Level: " + me.level, 30, 90);
		g.drawString("Exp: " + me.exp, 140, 60);
		g.drawString("Next level in: " + me.expToNextLevel, 140, 90);
		
		g.setColor(Color.BLUE);
		if(me.isAlive)
			g.fillRect(me.x, me.y, me.WIDTH, me.HEIGHT);
			
		repaint(); //Calls the paintComponent method again to keep updating
	}
	
	 public void start()
	 {
	     running = true;
	     thread = new Thread(this); 
	     thread.start();
	 }
	    
	 public synchronized void stop()
	 {
	     running = false;
	     try
	     {
	         thread.join();
	     }
	     catch(Exception e)
	     {
	         System.out.println("Error Game.stop() " + e);
	     }
	 }
	    
	 public void run()
	 {
	     long lastTime = System.nanoTime();
	     long timer = System.currentTimeMillis();
	     final double ns = 1000000000.0 / 60.0;
	     double delta = 0;
	     int frames = 0;
	     int updates = 0;
	    
	     while(running)
	     {
	         long now = System.nanoTime();
	         delta += (now - lastTime) / ns;
	         lastTime = now;
	         while(delta >= 1)
	         {
	             update();
	             updates++;
	             delta --;
	         }
	         frames++;
	            
	         if(System.currentTimeMillis() - timer > 1000)
	         {
	             timer += 1000;
	         //  System.out.println(updates + " updates, " + frames + "fps");
	             fps = frames;
	             ups = updates;
	             updates = 0;
	             frames = 0;
	         }
	     }
	     stop();
	 }
	    
	 public void update()
	 {
		 gGameMode.update();
		 gGameMode.render();
	 }	 
	 
	 public void initNewAccountMenu()
	 {
		 
	 }
	 
	 public Boolean logIn()
	 {
		 JTextField username = new JTextField();
		 JTextField password = new JTextField();
         JOptionPane op = new JOptionPane();
         int numFailedLoginAttempts = 0;
         final JComponent[] inputs = new JComponent[] {
                    new JLabel("Username"),
                    username,
                    
                    new JLabel("Password"),
                    password
         };
         
         JOptionPane.showMessageDialog(null, inputs);
          
         try {
               Class.forName("com.mysql.jdbc.Driver").newInstance();
         }
         catch(ClassNotFoundException ex) {
               System.out.println("Error: unable to load driver class!");
               System.exit(1);
         }
         catch(IllegalAccessException ex) {
               System.out.println("Error: access problem while loading!");
               System.exit(2);
         }
         catch(InstantiationException ex) {
               System.out.println("Error: unable to instantiate driver!");
               System.exit(3);
         }
         
         String URL = "jdbc:mysql://sql5.freesqldatabase.com:3306/sql5104581";
         String USER = "sql5104581";
         String PASS = "8CHGkEPagu";
         Connection con = null;
         Statement stmt = null;
         try
         {
            con = DriverManager.getConnection(URL, USER, PASS);
            stmt = con.createStatement();String sql;
            sql = "SELECT * from AccountsTable where Username = \'" + username.getText() + "\';";
            ResultSet rs = stmt.executeQuery(sql);
             
            //If there is no results for the entered username
            if (!rs.next()) {
              System.out.println("No account found with username: " + username.getText());
              return false;
              //Call a method that suggests the player to make a new account.
            }

            //Set the ResultSet counter back to the beginning of the ResultSet
            //This is necessary since the previous method moves the counter forward to
            //check if the ResultSet is empty.
            rs.beforeFirst();
            while(rs.next())
            {
                int accountNumber = rs.getInt("AccountNumber");
                String accountUsername = rs.getString("Username");
                String accountPassword = rs.getString("Password");

                if(username.getText().equals(accountUsername))
                {
                	if(password.getText().equals(accountPassword))
                	{
                		loginCorrect = true;
                	}
                	else
                	{
                		numFailedLoginAttempts++;
                		/*
                		 * Clear out password field
                		 * leave username populated
                		 * display message "Invalid login"
                		 */
                	}
                }
            }
            // cleaning up
            rs.close();
            stmt.close();
            con.close();
         } 
         catch (SQLException e) {
            e.printStackTrace();
         }
         catch (Exception e) {
             e.printStackTrace();
         }
         finally
         {  
             //closing the resources in case they weren't closed earlier
             try {
             if (stmt != null)
                     stmt.close();
             }
             catch (SQLException e2) {
                e2.printStackTrace();
             }
             try {
                 if (con != null) {
                     con.close();
                  }
             } 
             catch (SQLException e2) {
                    e2.printStackTrace();
             }
         }
         return true;
	 }

/*	 
	 public static void main(String[] args) 
	 {
	      Main game = new Main();
	      if(loginCorrect)
	    	  game.start();
     }  
*/	 

///*
	 public static void main(String[] args) {
	        Scanner clientInput = new Scanner(System.in);
	        ChatRoomClient client = new ChatRoomClient();
	        String clientMessage;

	        while(!ChatRoomClient.quit){
	            clientMessage = clientInput.nextLine();	            
	            if(clientMessage.equals("~quit")){
	                    client.quit();
	            } else if(clientMessage.equals("~connect")){
	                System.out.println("Host Name: ");
	                String hostName = clientInput.next();
	                System.out.println("Port: ");
	                int port = Integer.parseInt(clientInput.next());
	                    client.connect(port, hostName); //I couldn't test weather this works on a non-local network or not
	                    new Thread(client).start();     //but I'm 90% sure switching out host name for IP address will make it work
	            } else {
	                    System.out.println("Sent: " + clientMessage);
	                    client.send(clientMessage);
	            }
	        }
	       System.out.println("Good Bye!");
	       clientInput.close();
	    }
//*/
	 
/*
    public static void main(String [] args) throws IOException
	{
	   java.net.InetAddress addr = java.net.InetAddress.getLocalHost();
	   String hostname = addr.getHostName();  //Honestly don't know what exactly this is, just stole it from Stackoverflow
	   System.out.println("Hostname of system = " + hostname);
	   System.out.println("Port = 6066");
	   
	   Scanner hostInput = new Scanner(System.in);//Scanner for user text input
	   ChatRoomHost host = new ChatRoomHost(6066);//Implementing the Chat Room Host
	   String hostMessage;
        
        while(!quit){// feel like it's pretty self explanatory from here
        	hostMessage = hostInput.next();
        	if(hostMessage.equals("~quit")){
        		host.quit();
        	} else if(hostMessage.equals("~connect")){
        		host.connect();
                new Thread(host).start();
        		System.out.println("Connected");
        	} else {
        		System.out.println("Sent: " + hostMessage);
        		host.send(hostMessage);
        	}
        }
      System.out.println("Good Bye!");
      hostInput.close();
	}
 */
	 
	 
}


